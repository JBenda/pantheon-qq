=== modified file 'CMakeLists.txt'
--- CMakeLists.txt	2013-08-10 02:09:50 +0000
+++ CMakeLists.txt	2013-09-07 21:56:10 +0000
@@ -36,7 +36,7 @@
 set (WINGPANEL_DEPS "gobject-2.0;glib-2.0;gio-2.0;gee-1.0;gdk-x11-3.0;x11;gtk+-3.0;granite")
 set (WINGPANEL_DEPS_NOVALA "gthread-2.0;indicator3-0.4")
 find_package (PkgConfig)
-pkg_check_modules (DEPS REQUIRED ${WINGPANEL_DEPS})
+pkg_check_modules (DEPS REQUIRED ${WINGPANEL_DEPS} libido3-0.1)
 pkg_check_modules (DEPS_NOVALA REQUIRED ${WINGPANEL_DEPS_NOVALA})
 
 # Static Files

=== modified file 'src/Indicator/IndicatorFileModel.vala'
--- src/Indicator/IndicatorFileModel.vala	2013-04-14 17:31:20 +0000
+++ src/Indicator/IndicatorFileModel.vala	2013-09-07 21:56:10 +0000
@@ -25,6 +25,8 @@
     public class IndicatorFileModel {
         private Gee.HashMap<Indicator.Object, string> indicator_map;
 
+		const string INDICATOR_FILE_DIR = "/usr/share/unity/indicators/";
+
         public IndicatorFileModel (Services.Settings settings) {
             indicator_map = new Gee.HashMap<Indicator.Object, string> ();
 
@@ -43,6 +45,7 @@
 
             debug ("Blacklisted Indicators: %s", skip_list);
 
+			// traditional indicator libraries
             var indicators_to_load = new Gee.ArrayList<string> ();
             var dir = File.new_for_path (Build.INDICATORDIR);
             debug ("Indicator Directory: %s", dir.get_path ());
@@ -65,11 +68,32 @@
                         indicators_to_load.add (leaf);
                 }
             } catch (Error err) {
-                error ("Unable to read indicators: %s", err.message);
+                warning ("Unable to read indicators: %s", err.message);
             }
 
             foreach (string leaf in indicators_to_load)
-                load_indicator (dir.get_child (leaf).get_path (), leaf);
+                load_indicator_library (dir.get_child (leaf).get_path (), leaf);
+
+			// indidicator files
+			indicators_to_load = new Gee.ArrayList<string> ();
+			dir = File.new_for_path (INDICATOR_FILE_DIR);
+
+			try {
+				var enumerator = dir.enumerate_children(FileAttribute.STANDARD_NAME,
+				                                        FileQueryInfoFlags.NONE, null);
+				FileInfo file_info;
+				while ((file_info = enumerator.next_file (null)) != null) {
+					var name = file_info.get_name ();
+					if (name in skip_list)
+						continue;
+					indicators_to_load.add (name);
+				}
+			} catch (Error err) {
+				warning ("Unable to read indicators: %s", err.message);
+			}
+
+			foreach (var name in indicators_to_load)
+				load_indicator_file (name);
         }
 
         public Gee.Collection<Indicator.Object> get_indicators () {
@@ -80,8 +104,8 @@
             return indicator_map.get (indicator);
         }
 
-        private void load_indicator (string filename, string leaf) {
-            debug ("LOADING: %s", leaf);
+        private void load_indicator_library (string filename, string leaf) {
+            debug ("Loading Library: %s", leaf);
 
             var indicator = new Indicator.Object.from_file (filename);
 
@@ -90,5 +114,16 @@
             else
                 critical ("Unable to load %s", filename);
         }
+
+        private void load_indicator_file (string name) {
+            debug ("Loading File: %s", name);
+
+            var indicator = new Indicator.Ng.for_profile (INDICATOR_FILE_DIR + "/" + name, "desktop");
+
+            if (indicator is Indicator.Object)
+                indicator_map.set (indicator, name);
+            else
+                critical ("Unable to load %s", name);
+        }
     }
 }

=== modified file 'src/Indicator/IndicatorObjectEntry.vala'
--- src/Indicator/IndicatorObjectEntry.vala	2013-08-19 19:12:24 +0000
+++ src/Indicator/IndicatorObjectEntry.vala	2013-09-07 21:56:10 +0000
@@ -216,7 +216,8 @@
                     break;
             }
 
-            entry.parent_object.entry_scrolled (entry, (uint) delta, direction);
+			//FIXME no access to parent_object anymore
+			// entry.parent_object.entry_scrolled (entry, (uint) delta, direction);
 
             return false;
         }

=== modified file 'src/Services/IndicatorSorter.vala'
--- src/Services/IndicatorSorter.vala	2013-04-14 10:19:10 +0000
+++ src/Services/IndicatorSorter.vala	2013-09-07 21:56:10 +0000
@@ -32,19 +32,25 @@
         { "libapplication.so", null },                   // indicator-application (App indicators)
         { "libapplication.so", "keyboard" },             // Keyboard layout selector (old)
         { "libapplication.so", "gsd-keyboard-xkb" },     // keyboard layout selector
+		{ "com.canonical.indicator.keyboard", null },
         { "libsoundmenu.so", null },                     // indicator-sound
+		{ "com.canonical.indicator.sound", null },
         { "libnetwork.so", null },                       // indicator-network
         { "libnetworkmenu.so", null },                   // indicator-network
         { "libapplication.so", "nm-applet" },            // network manager
         { "libbluetooth.so", null },                     // indicator-bluetooth
         { "libapplication.so", "bluetooth-manager" },    // indicator-gnome-bluetooth (old)
+		{ "com.canonical.indicator.bluetooth", null },
         { "libprintersmenu.so", null },                  // indicator-printers
         { "libsyncindicator.so", null },                 // indicator-sync
         { "libpower.so", null },                         // indicator-power
+		{ "com.canonical.indicator.power", null },
         { "libmessaging.so", null },                     // indicator-messages
+		{ "com.canonical.indicator.messages", null },
         { "libsession.so", null },                       // indicator-session
         { "libsession.so", "indicator-session-users" },  // indicator-session
-        { "libsession.so", "indicator-session-devices" } // indicator-session
+        { "libsession.so", "indicator-session-devices" },// indicator-session
+		{ "com.canonical.indicator.session", null }
     };
 
     public static int compare_func (IndicatorWidget? a, IndicatorWidget? b) {

=== modified file 'src/Widgets/Panel.vala'
--- src/Widgets/Panel.vala	2013-04-14 07:54:25 +0000
+++ src/Widgets/Panel.vala	2013-09-07 21:56:10 +0000
@@ -77,7 +77,8 @@
         }
 
         private void create_entry (IndicatorWidget entry) {
-            if (entry.get_indicator ().get_name () == "libdatetime.so")
+            if (entry.get_indicator ().get_name () == "libdatetime.so"
+				|| entry.get_indicator ().get_name () == "com.canonical.indicator.datetime")
                 clock.prepend (entry);
             else
                 menubar.insert_sorted (entry);

=== modified file 'src/WingpanelApp.vala'
--- src/WingpanelApp.vala	2013-04-14 07:54:25 +0000
+++ src/WingpanelApp.vala	2013-09-07 21:56:10 +0000
@@ -45,6 +45,8 @@
         }
 
         private void init () {
+			Ido.init ();
+
             settings = new Services.Settings ();
             indicator_loader = new Backend.IndicatorFactory (settings);
             panel = new Widgets.Panel (this, settings, indicator_loader);

=== modified file 'vapi/indicator-0.4.vapi'
--- vapi/indicator-0.4.vapi	2012-07-02 11:14:18 +0000
+++ vapi/indicator-0.4.vapi	2013-09-07 21:56:10 +0000
@@ -1,7 +1,6 @@
-/* indicator-0.4.vapi generated by vapigen, do not modify. */
-
+[CCode (cprefix = "Indicator", lower_case_cprefix = "indicator_")]
 namespace Indicator {
-	[CCode (cheader_filename = "libindicator/indicator-desktop-shortcuts.h", type_check_function = "INDICATOR_IS_DESKTOP_SHORTCUTS", type_id = "indicator_desktop_shortcuts_get_type")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public class DesktopShortcuts : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public DesktopShortcuts (string file, string identity);
@@ -20,18 +19,12 @@
 		[NoWrapper]
 		public virtual void entry_activate (Indicator.ObjectEntry entry, uint timestamp);
 		[NoWrapper]
-		public virtual void entry_activate_window (Indicator.ObjectEntry entry, uint windowid, uint timestamp);
-		[NoWrapper]
-		public virtual void entry_being_removed (Indicator.ObjectEntry entry);
-		[NoWrapper]
 		public virtual void entry_close (Indicator.ObjectEntry entry, uint timestamp);
-		[NoWrapper]
-		public virtual void entry_was_added (Indicator.ObjectEntry entry);
 		[CCode (has_construct_function = false)]
 		public Object.from_file (string file);
 		[NoWrapper]
 		public virtual unowned string get_accessible_desc ();
-		public virtual GLib.List<weak Indicator.ObjectEntry> get_entries ();
+		public virtual GLib.List<unowned ObjectEntry> get_entries ();
 		public unowned string[] get_environment ();
 		[NoWrapper]
 		public virtual unowned Gtk.Image get_image ();
@@ -43,6 +36,7 @@
 		[NoWrapper]
 		public virtual unowned string get_name_hint ();
 		public virtual bool get_show_now (Indicator.ObjectEntry entry);
+		public virtual int get_position ();
 		[NoWrapper]
 		public virtual void reserved1 ();
 		[NoWrapper]
@@ -54,36 +48,35 @@
 		[NoWrapper]
 		public virtual void reserved5 ();
 		public void set_environment (string[] env);
-		public void set_visible (bool visible);
-		[NoAccessorMethod]
-		public bool indicator_object_default_visibility { get; set; }
 		public virtual signal void accessible_desc_update (Indicator.ObjectEntry entry);
 		public virtual signal void entry_added (Indicator.ObjectEntry entry);
 		public virtual signal void entry_moved (Indicator.ObjectEntry entry, uint old_pos, uint new_pos);
 		public virtual signal void entry_removed (Indicator.ObjectEntry entry);
 		public virtual signal void entry_scrolled (Indicator.ObjectEntry entry, uint delta, Indicator.ScrollDirection direction);
 		public virtual signal void menu_show (Indicator.ObjectEntry entry, uint timestamp);
-		public virtual signal void secondary_activate (Indicator.ObjectEntry entry, uint timestamp);
 		public virtual signal void show_now_changed (Indicator.ObjectEntry entry, bool show_now_state);
 	}
-	[CCode (cheader_filename = "libindicator/indicator-object.h")]
+	[CCode (cheader_filename = "libindicator/indicator-ng.h")]
+	public class Ng : Object {
+		[CCode (has_construct_function = false)]
+		public Ng.for_profile (string filename, string profile) throws GLib.Error;
+	}
 	[Compact]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public class ObjectEntry {
 		public weak string accessible_desc;
 		public weak Gtk.Image image;
 		public weak Gtk.Label label;
 		public weak Gtk.Menu menu;
 		public weak string name_hint;
-		public weak Indicator.Object parent_object;
 		public weak GLib.Callback reserved1;
 		public weak GLib.Callback reserved2;
 		public weak GLib.Callback reserved3;
 		public weak GLib.Callback reserved4;
 		public static void activate (Indicator.Object io, Indicator.ObjectEntry entry, uint timestamp);
-		public static void activate_window (Indicator.Object io, Indicator.ObjectEntry entry, uint windowid, uint timestamp);
 		public static void close (Indicator.Object io, Indicator.ObjectEntry entry, uint timestamp);
 	}
-	[CCode (cheader_filename = "libindicator/indicator-service.h", type_check_function = "INDICATOR_IS_SERVICE", type_id = "indicator_service_get_type")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public class Service : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Service (string name);
@@ -95,15 +88,13 @@
 		public virtual void indicator_service_reserved3 ();
 		[NoWrapper]
 		public virtual void indicator_service_reserved4 ();
-		[CCode (cname = "indicator_service_new_version", has_construct_function = false)]
-		public Service.with_version (string name, uint version);
+		[CCode (has_construct_function = false)]
+		public Service.version (string name, uint version);
 		[NoAccessorMethod]
 		public string name { owned get; set; }
-		[NoAccessorMethod]
-		public uint version { get; set; }
 		public virtual signal void shutdown ();
 	}
-	[CCode (cheader_filename = "libindicator/indicator-service-manager.h", type_check_function = "INDICATOR_IS_SERVICE_MANAGER", type_id = "indicator_service_manager_get_type")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public class ServiceManager : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public ServiceManager (string dbus_name);
@@ -117,59 +108,58 @@
 		[NoWrapper]
 		public virtual void indicator_service_manager_reserved4 ();
 		public void set_refresh (uint time_in_ms);
-		[CCode (cname = "indicator_service_manager_new_version", has_construct_function = false)]
-		public ServiceManager.with_version (string dbus_name, uint version);
+		[CCode (has_construct_function = false)]
+		public ServiceManager.version (string dbus_name, uint version);
 		[NoAccessorMethod]
 		public string name { owned get; set; }
-		[NoAccessorMethod]
-		public uint version { get; set; }
 		public virtual signal void connection_change (bool connected);
 	}
-	[CCode (cheader_filename = "libindicator/indicator-object.h", cprefix = "INDICATOR_OBJECT_SCROLL_", has_type_id = false)]
+	[CCode (cprefix = "INDICATOR_OBJECT_SCROLL_", has_type_id = false, cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public enum ScrollDirection {
 		UP,
 		DOWN,
 		LEFT,
 		RIGHT
 	}
-	[CCode (cheader_filename = "libindicator/indicator.h", has_target = false)]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h", has_target = false)]
 	public delegate GLib.Type get_type_t ();
-	[CCode (cheader_filename = "libindicator/indicator.h", has_target = false)]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h", has_target = false)]
 	public delegate unowned string get_version_t ();
-	[CCode (cheader_filename = "libindicator/indicator.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string GET_TYPE_S;
-	[CCode (cheader_filename = "libindicator/indicator.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string GET_VERSION_S;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_DEFAULT_VISIBILITY;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string OBJECT_SIGNAL_ACCESSIBLE_DESC_UPDATE;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string OBJECT_SIGNAL_ENTRY_ADDED;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string OBJECT_SIGNAL_ENTRY_MOVED;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string OBJECT_SIGNAL_ENTRY_REMOVED;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string OBJECT_SIGNAL_ENTRY_SCROLLED;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string OBJECT_SIGNAL_MENU_SHOW;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_SIGNAL_SECONDARY_ACTIVATE;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string OBJECT_SIGNAL_SHOW_NOW_CHANGED;
-	[CCode (cheader_filename = "libindicator/indicator-service-manager.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string SERVICE_MANAGER_SIGNAL_CONNECTION_CHANGE;
-	[CCode (cheader_filename = "libindicator/indicator-service.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string SERVICE_SIGNAL_SHUTDOWN;
-	[CCode (cheader_filename = "libindicator/indicator.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const int SET_VERSION;
-	[CCode (cheader_filename = "libindicator/indicator.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public const string VERSION;
-	[CCode (cheader_filename = "libindicator/indicator.h", cname = "get_version")]
+	[CCode (cname = "get_version", cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public static unowned string get_version ();
-	[CCode (cheader_filename = "libindicator/indicator-image-helper.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public static unowned Gtk.Image image_helper (string name);
-	[CCode (cheader_filename = "libindicator/indicator-image-helper.h")]
+	[CCode (cheader_filename = "gtk/gtk.h,libindicator/indicator.h,libindicator/indicator-desktop-shortcuts.h,libindicator/indicator-image-helper.h,libindicator/indicator-object.h,libindicator/indicator-service.h,libindicator/indicator-service-manager.h")]
 	public static void image_helper_update (Gtk.Image image, string name);
 }
+
+[CCode (cheader_filename="libido/libido.h", lower_case_cprefix = "ido_")]
+namespace Ido {
+	public void init ();
+}

